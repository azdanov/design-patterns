@startuml Strategy

skinparam rectangle {
  roundCorner 25
}

rectangle "Client" {
  abstract class Character {
    {field} ~WeaponBehavior weapon
    {method} Character(WeaponBehavior w);
    {method} +void fight();
    {method} +void setWeaponBehavior(WeaponBehavior w);
  }

  class Knight extends Character

  class Wizard extends Character
}

together {
  rectangle "Encapsulated Weapon Behavior" {
    interface WeaponBehavior {
      {method} useWeapon()
    }

    class SwordBehavior implements WeaponBehavior {
      {method} +void useWeapon();
    }

    class MagicBehavior implements WeaponBehavior {
      {method} +void useWeapon();
    }
  }

  rectangle "Encapsulated Armor Behavior" {
    interface ArmorBehavior {
      {method} useArmor()
    }

    class LightArmorBehavior implements ArmorBehavior {
      {method} +void useArmor();
    }

    class HeavyArmorBehavior implements ArmorBehavior {
      {method} +void useArmor();
    }
  }
}

Character --> "Encapsulated Weapon Behavior"
Character --> "Encapsulated Armor Behavior"
Character -[hidden]--> ArmorBehavior
@enduml